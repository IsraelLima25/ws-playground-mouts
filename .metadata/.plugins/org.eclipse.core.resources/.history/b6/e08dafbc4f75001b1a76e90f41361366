package com.dev.lima.services;

import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.Optional;

import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;

import com.dev.lima.dtos.PersonDTO;
import com.dev.lima.entities.Person;
import com.dev.lima.exceptions.ResourceNotFounException;
import com.dev.lima.repositories.PersonRepository;

@SpringBootTest
public class PersonServiceTest {

	private static PersonDTO personDTO = new PersonDTO();
	private static Person person = new Person();

	@MockBean
	private PersonRepository repo;

	@Autowired
	private PersonService service;

	@Autowired
	public ModelMapper modelMapper;

	@BeforeAll
	public static void init() {
		personDTO = PersonDTO.builder().cpf("04922265912").build();
		person.setCpf("04922265912");
	}

	@Test
	public void findPersonByCPFWhenExistis() {

		when(this.repo.findById("04922265912")).thenReturn(Optional.of(person));
		PersonDTO personFind = service.findPersonByCPF(personDTO.getCpf());
		assertTrue(personFind.getCpf().equals("04922265912"));
	}

	@Test
	public void findPersonByCPFWhenNotExistis() {

		RuntimeException exception = assertThrows(ResourceNotFounException.class, () -> {
			service.findPersonByCPF(personDTO.getCpf());
		});

		String exceptionNamen = exception.getClass().getName();
		assertTrue(exceptionNamen.equals(ResourceNotFounException.class.getName()));
	}
	
	@Test
	public void savePerson() {
		service.savePerson(personDTO);
		verify(repo, times(1)).save(person);
	}
}
