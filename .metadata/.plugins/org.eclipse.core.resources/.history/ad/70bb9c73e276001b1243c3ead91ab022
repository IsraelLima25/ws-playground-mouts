package com.dev.lima.resources;

import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import java.time.LocalDate;
import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.security.test.context.support.WithMockUser;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;

import com.dev.lima.dtos.PersonDTO;
import com.dev.lima.dtos.PersonDTOUpdate;
import com.dev.lima.enums.Sexo;
import com.dev.lima.services.PersonService;
import com.fasterxml.jackson.databind.ObjectMapper;

@WebMvcTest(PersonResource.class)
public class ResourcePersonTest {
	
	private PersonDTO personDTO;
	
    @Autowired
    private MockMvc mockMvc;
	
	private PersonDTOUpdate personDTOUpdate;
	
	@Autowired
	private PersonResource personResource;
	
	@MockBean
	private PersonService personService;

	@Autowired
	private ObjectMapper mapperJackson; = new ObjectMapper();
	
	@BeforeEach
	public void setup() {
		
		
		
		this.personDTO = PersonDTO.builder()
				.cpf("18626735006")
				.dateBirth(LocalDate.of(2020, 3, 1))
				.email("israelslf22@gmail.com")
				.nationality("brasileiro")
				.naturalness("Salvador")
				.name("Israel Santos Lima Filho")
				.sexo(Sexo.MASCULINO)
				.build();
		
		this.personDTOUpdate = PersonDTOUpdate.builder()
		.dateBirth(LocalDate.of(2020, 3, 1))
		.email("israelslf22@gmail.com")
		.nationality("brasileiro")
		.naturalness("Salvador")
		.name("Israel Santos Lima Filho")
		.sexo(Sexo.MASCULINO)
		.build();
		
	}

	@Test
	public void shouldReturnIsokWhenUserListPerson() throws Exception {
		
		Mockito.when(personService.listAll()).thenReturn(List.of(personDTO));
		
		mockMvc.perform(get("/persons")
				.content(MediaType.APPLICATION_JSON_VALUE))
				.andExpect(status().isOk());
	}

	
	@Test
	public void shouldReturnUnauthorizationWhenUserNotAuthenticatedDeletePerson() throws Exception {
		
		Mockito.when(personService.delete(personDTO.getCpf())).thenReturn(true);
		Mockito.when(personService.findPersonByCPF(personDTO.getCpf())).thenReturn(personDTO);
		
		mockMvc.perform(delete("/person/18626735006")
				.content(MediaType.APPLICATION_JSON_VALUE))		
			.andExpect(status().isUnauthorized());
	}
	
	@Test
	@WithMockUser(username = "israel")
	public void shouldReturnSuccessWhenUserAuthenticatedDeletePersonCPFExists() throws Exception {
		
		Mockito.when(personService.delete(personDTO.getCpf())).thenReturn(true);
		Mockito.when(personService.findPersonByCPF(personDTO.getCpf())).thenReturn(personDTO);
		
		mockMvc.perform(delete("/person/18626735006")
				.content(MediaType.APPLICATION_JSON_VALUE));
		
		assertTrue(personService.delete(personDTO.getCpf()) != false);
	}
	
	@Test
	@WithMockUser(username = "israel")
	public void shouldSuccessWhenUserAuthenticatedDeletePersonCPFNotExists() throws Exception {
		
		Mockito.when(personService.delete(personDTO.getCpf())).thenReturn(true);
		Mockito.when(personService.findPersonByCPF(personDTO.getCpf())).thenReturn(personDTO);
		
		mockMvc.perform(delete("/person/18626735006")
				.content(MediaType.APPLICATION_JSON_VALUE))
				.andExpect(status().is4xxClientError());
		
		assertTrue(personService.delete(personDTO.getCpf()) != false);
	}
	
	@Test
	public void shouldReturnUnauthorizationWhenUsuarioNotAuthenticatedCreatedPerson() throws Exception {
		
		Mockito.when(personService.savePerson(personDTO)).thenReturn(personDTO);
		
		mockMvc.perform(post("/persons", personDTO))
				.andExpect(status().isUnauthorized());
	}
	
	@Test
	@WithMockUser(username = "israel")
	public void shouldReturnCreatedWhenUsuarioAuthenticatedCreatedPerson() throws Exception {
		
		mockMvc.perform(MockMvcRequestBuilders
				.post("/persons")
				.content(asJsonString(new PersonDTO()))
				.content(MediaType.APPLICATION_JSON_VALUE)
				.accept(MediaType.APPLICATION_JSON))
				
	}

//	
//	@Test
//	public void shouldReturnCreatedAndHeaderUriWhenPersonSave(){
//		
//		String jsonPersonDTO = 
//				"{\"cpf\": \"18626735006\", \"dateBirth\": \"2020-03-01\", "
//				+ "\"email\": \"israelslf22@gmail.com\", \"nationality\": \"brasileiro\", "
//				+ "\"naturalness\":\"Salvador\", \"name\":\"Israel Santos Lima Filho\", \"sexo\":\"MASCULINO\"}";
//		
//		Mockito.when(this.personService.savePerson(this.personDTO)).thenReturn(this.personDTO);
//		
//		 RestAssuredMockMvc.given()
//		.contentType("application/json")
//		.body(jsonPersonDTO)
//		.when()
//		.post("/persons")
//		.then()
//		.statusCode(HttpStatus.CREATED.value())
//		.header("Location", Matchers.containsString("/persons/18626735006"));
//	}
//	
//	@Test
//	public void shouldReturnBadRequestNamePersonNullOrBlank() {
//		
//		Mockito.when(this.personService.savePerson(this.personDTO)).thenReturn(this.personDTO);
//		
//		String jsonPersonDTO = 
//				"{\"cpf\": \"18626735006\", \"dateBirth\": \"2020-03-01\", "
//				+ "\"email\": \"israelslf22@gmail.com\", \"nationality\": \"brasileiro\", "
//				+ "\"naturalness\":\"Salvador\", \"name\": \"\", \"sexo\":\"MASCULINO\"}";
//		
//		RestAssuredMockMvc.given()
//		.contentType("Application/json")
//		.body(jsonPersonDTO)
//		.when()
//		.post("/persons")
//		.then()
//		.statusCode(HttpStatus.BAD_REQUEST.value());
//	}
//	
//	@Test
//	public void shouldReturnBadRequestEmailPersonInvalid() {
//		
//		Mockito.when(this.personService.savePerson(this.personDTO)).thenReturn(this.personDTO);
//		
//		String jsonPersonDTO = 
//				"{\"cpf\": \"18626735006\", \"dateBirth\": \"2020-03-01\", "
//				+ "\"email\": \"israelslf22gmail.com\", \"nationality\": \"brasileiro\", "
//				+ "\"naturalness\":\"Salvador\", \"name\": \"Israel Santos Lima Filho\", \"sexo\":\"MASCULINO\"}";
//		
//		RestAssuredMockMvc.given()
//		.contentType("Application/json")
//		.body(jsonPersonDTO)
//		.when()
//		.post("/persons")
//		.then()
//		.statusCode(HttpStatus.BAD_REQUEST.value());
//	}
//	
//	@Test
//	public void shouldReturnBadRequestDataNascimentoPersonBlanckOrNull() {
//		
//		Mockito.when(this.personService.savePerson(this.personDTO)).thenReturn(this.personDTO);
//		
//		String jsonPersonDTO = 
//				"{\"cpf\": \"18626735006\", \"dateBirth\": \"2020-03-0\", "
//				+ "\"email\": \"israelslf22gmail.com\", \"nationality\": \"brasileiro\", "
//				+ "\"naturalness\":\"Salvador\", \"name\": \"Israel Santos Lima Filho\", \"sexo\":\"MASCULINO\"}";
//		
//		RestAssuredMockMvc.given()
//		.contentType("Application/json")
//		.body(jsonPersonDTO)
//		.when()
//		.post("/persons")
//		.then()
//		.statusCode(HttpStatus.BAD_REQUEST.value());
//	}
//	
//	@Test
//	public void shouldReturnBadRequestCPFNullOrInvalid() {
//		
//		Mockito.when(this.personService.savePerson(this.personDTO)).thenReturn(this.personDTO);
//		
//		String jsonPersonDTO = 
//				"{\"cpf\": \"186\", \"dateBirth\": \"2020-03-0\", "
//				+ "\"email\": \"israelslf22gmail.com\", \"nationality\": \"brasileiro\", "
//				+ "\"naturalness\":\"Salvador\", \"name\": \"Israel Santos Lima Filho\", \"sexo\":\"MASCULINO\"}";
//		
//		RestAssuredMockMvc.given()
//		.contentType("Application/json")
//		.body(jsonPersonDTO)
//		.when()
//		.post("/persons")
//		.then()
//		.statusCode(HttpStatus.BAD_REQUEST.value());
//	}
//	
//	@Test
//	public void shouldReturnSuccessWhenUpdatePerson() {
//		
//		Mockito.when(this.personService.update(this.personDTOUpdate, "18626735006")).thenReturn(this.personDTO);
//		
//		String jsonPersonDTO = 
//				"{\"dateBirth\": \"2020-03-01\","
//				+ "\"email\": \"israelslf22@gmail.com\", \"nationality\": \"brasileiro\", "
//				+ "\"naturalness\":\"Salvador\", \"name\": \"Israel Santos Lima Filho\", \"sexo\":\"MASCULINO\"}";
//		
//		RestAssuredMockMvc.given()
//		.contentType("Application/json")
//		.body(jsonPersonDTO)
//		.when()
//		.put("/persons/{cpf}", "18626735006")
//		.then()
//		.statusCode(HttpStatus.OK.value());
//	}
	
}
