package com.dev.lima.services;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.Mockito.*;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;

import com.dev.lima.dtos.PersonDTO;
import com.dev.lima.entities.Person;
import com.dev.lima.exceptions.ResourceNotFounException;
import com.dev.lima.repositories.PersonRepository;

@SpringBootTest
public class PersonServiceTest {

	private static PersonDTO personDTO = new PersonDTO();
	private static Person person = new Person();
	private static List<Person> persons = new ArrayList<>();

	@MockBean
	private PersonRepository repo;

	@Autowired
	private PersonService service;

	@Autowired
	public ModelMapper modelMapper;

	@BeforeAll
	public static void init() {
		personDTO = PersonDTO.builder().cpf("04922265912").build();
		person.setCpf("04922265912");
		person.setEmail("israelslf22@gmail.com");
		
		persons.add(person);
	}

	@Test
	public void findPersonByCPFWhenExistis() {

		when(this.repo.findById("04922265912")).thenReturn(Optional.of(person));
		PersonDTO personFind = service.findPersonByCPF(personDTO.getCpf());
		assertTrue(personFind.getCpf().equals("04922265912"));
	}

	@Test
	public void findPersonByCPFWhenNotExistis() {

		RuntimeException exception = assertThrows(ResourceNotFounException.class, () -> {
			service.findPersonByCPF(personDTO.getCpf());
		});

		String exceptionNamen = exception.getClass().getName();
		assertTrue(exceptionNamen.equals(ResourceNotFounException.class.getName()));
	}
	
	@Test
	public void savePerson() {
		when(this.repo.save(person)).thenReturn(person);
		PersonDTO savePerson = service.savePerson(personDTO);
		
		verify(repo, times(1)).save(person);
		assertTrue(savePerson.getCpf().equals(person.getCpf()));
	}
	
	@Test
	public void listAllPerson() {
		when(this.repo.findAll()).thenReturn(persons);
		List<PersonDTO> personsDTO = service.listAll();
		
		int sizeList = personsDTO.size();
		String cpf = personsDTO.get(0).getCpf();	
		
		assertEquals(1, sizeList);
		assertEquals(person.getCpf(),cpf);
	}
	
	@Test
	public void updatePerson() {
		
		Person personNew = new Person();
		personNew.setCpf("04922265912");
		personNew.setEmail("israel@uol.com");
		
		when(this.repo.findById(personDTO.getCpf())).thenReturn(Optional.of(person));
		when(this.repo.save(person)).thenReturn(personNew);
		
		PersonDTO personMapDTO = modelMapper.map(personNew, PersonDTO.class);
		
		PersonDTO personDTOUpdate = service.update(personMapDTO, personNew.getCpf());
		
		assertTrue(!personDTOUpdate.getEmail().equals(personDTO.getEmail()));
		verify(repo, times(1)).save(person);
	}
	
	@Test
	public void deletePersonByCPF() {
		
		when(this.repo.findById("04922265912")).thenReturn(Optional.of(person));
		when(this.repo.deleteByCpf("04922265912")).thenReturn(1L);
		
		verify(repo, times(1)).deleteByCpf("04922265912");
		
		
	}
	
}
